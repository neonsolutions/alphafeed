generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model feed_items {
  id              String   @id @default(uuid())
  title_raw       String
  title           String?
  link            String   @unique
  description_raw String
  description     String?
  published       DateTime
  author          String
  scores          scores?
}

model scores {
  id           Int        @id @default(autoincrement())
  relevance    Float
  impact       Float
  novelty      Float
  reliability  Float
  feed_item_id String     @unique
  feed_items   feed_items @relation(fields: [feed_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Stripe
  stripeCustomerId         String?
  stripeSubscriptionId     String? @map("stripe_subscription_id")
  stripeSubscriptionStatus String? @map("subscription_status")

  // Newsletter
  optedOutNewsletter Boolean @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
